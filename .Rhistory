uniqueIndex <- which(duplicated(LAbusinessAnalyst[,"jobDesc"])==FALSE)
LAbusinessAnalystClean <- LAbusinessAnalyst[uniqueIndex,]
LAbusinessAnalystClean <- as.data.frame(LAbusinessAnalystClean,stringsAsFactors = FALSE)
LAbusinessAnalystClean$jobLev <- factor(LAbusinessAnalystClean$jobLev)
rm(uniqueIndex)
#clean busIntAnalyst
uniqueIndex <- which(duplicated(LAbusinessIntAnalyst[,"jobDesc"])==FALSE)
LAbusinessIntAnalystClean <- LAbusinessIntAnalyst[uniqueIndex,]
LAbusinessIntAnalystClean <- as.data.frame(LAbusinessIntAnalystClean,stringsAsFactors = FALSE)
LAbusinessIntAnalystClean$jobLev <- factor(LAbusinessIntAnalystClean$jobLev)
rm(uniqueIndex)
#clean dataAnalyst
uniqueIndex <- which(duplicated(LAdataAnalyst[,"jobDesc"])==FALSE)
LAdataAnalystClean <- LAdataAnalyst[uniqueIndex,]
LAdataAnalystClean <- as.data.frame(LAdataAnalystClean,stringsAsFactors = FALSE)
LAdataAnalystClean$jobLev <- factor(LAdataAnalystClean$jobLev)
rm(uniqueIndex)
#combine busAnalystClean, businessIntAnalystClean, dataAnalystClean
#check for duplicates
tempJobData <- rbind(LAbusinessAnalystClean, LAbusinessIntAnalystClean, LAdataAnalystClean)
tempJobData <- as.data.frame(tempJobData,stringsAsFactors=FALSE)
tempJobData$jobLev <- factor(tempJobData$jobLev)
uniqueIndex <- which(duplicated(tempJobData$jobDesc)==FALSE)
tempJobData <- tempJobData[uniqueIndex,]
rm(uniqueIndex)
#combine dataScienceClean with tempJobData and remove any duplicates
LAjobData <- rbind(LAdataScienceClean,tempJobData)
LAjobData <- as.data.frame(LAjobData,stringsAsFactors=FALSE)
LAjobData$jobLev <- factor(LAjobData$jobLev)
dupIndex <- which(duplicated(LAjobData$jobDesc) | duplicated(LAjobData$jobDesc, fromLast = TRUE) & LAjobData$jobLev==1)
LAjobData <- LAjobData[-dupIndex, ]
rm(dupIndex)
for(row in 1:nrow(LAjobData)){
LAjobData$jobDesc[row] <- Clean_String(LAjobData$jobDesc[row])
}
#randomly shuffle data
set.seed(123)
LAjobData <- LAjobData[sample(nrow(LAjobData)),]
LAjobData <- LAjobData[sample(nrow(LAjobData)),]
LAjob_corpus <- VCorpus(VectorSource(LAjobData$jobDesc))
LAjob_corpus_clean <- tm_map(LAjob_corpus, content_transformer(tolower))
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, removeNumbers)
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, removeWords, c(stopwords("english"),"will"))
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, removePunctuation)
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, stemDocument)
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, stripWhitespace)
LAjob_dtm <- DocumentTermMatrix(LAjob_corpus_clean)
LAjob_labels <- LAjobData[,"jobLev"]
LAjob_dtm_train <- LAjob_dtm[,intersect(colnames(LAjob_dtm),colnames(job_dtm_freq))]
LAjob_dtm_test <- LAjob_dtm[,intersect(colnames(LAjob_dtm),colnames(job_dtm_freq))]
LAjob_train_labels <- LAjobData[,"jobLev"]
LAjob_test_labels <- LAjobData[,"jobLev"]
LAjob_test <- apply(LAjob_dtm_test, MARGIN = 2, convert_counts)
#naive bayes results
LAnb_pred <- predict(job_nb,LAjob_test)
LAcmnb <- confusionMatrix(LAnb_pred, LAjob_test_labels, positive="1")
##confusion table
LAcmnb$table
##Accuracy Percentage
LAcmnb$overall[1]
#knn results
LAknn_pred <- predict(job_knn,LAjob_test)
LAcmknn <- confusionMatrix(LAknn_pred, LAjob_test_labels, positive="1")
LAcmknn$table
LAcmknn$overall[1]
#rf results
LArf_pred <- predict(job_rf,LAjob_test)
LAcmrf <- confusionMatrix(LArf_pred, LAjob_test_labels, positive="1")
LAcmrf$table
LAcmrf$overall[1]
#lasso results
LAlasso_pred <- predict(job_lasso,LAjob_test)
LAcmlasso <- confusionMatrix(LAlasso_pred, LAjob_test_labels, positive="1")
LAcmlasso$table
LAcmlasso$overall[1]
#ridge results
LAridge_pred <- predict(job_ridge,LAjob_test)
LAcmridge <- confusionMatrix(LAridge_pred, LAjob_test_labels, positive="1")
LAcmridge$table
LAcmridge$overall[1]
rm(LAdataScience,LAdataAnalyst,LAbusinessAnalyst,LAbusinessIntAnalyst)
load("LAData.RData")
#clean LAdataScience
uniqueIndex <- which(duplicated(LAdataScience[,"jobDesc"])==FALSE)
LAdataScienceClean <- LAdataScience[uniqueIndex,]
LAdataScienceClean <- as.data.frame(LAdataScienceClean,stringsAsFactors = FALSE)
LAdataScienceClean$jobLev <- factor(LAdataScienceClean$jobLev)
rm(uniqueIndex)
#clean busAnalyst
uniqueIndex <- which(duplicated(LAbusinessAnalyst[,"jobDesc"])==FALSE)
LAbusinessAnalystClean <- LAbusinessAnalyst[uniqueIndex,]
LAbusinessAnalystClean <- as.data.frame(LAbusinessAnalystClean,stringsAsFactors = FALSE)
LAbusinessAnalystClean$jobLev <- factor(LAbusinessAnalystClean$jobLev)
rm(uniqueIndex)
#clean busIntAnalyst
uniqueIndex <- which(duplicated(LAbusinessIntAnalyst[,"jobDesc"])==FALSE)
LAbusinessIntAnalystClean <- LAbusinessIntAnalyst[uniqueIndex,]
LAbusinessIntAnalystClean <- as.data.frame(LAbusinessIntAnalystClean,stringsAsFactors = FALSE)
LAbusinessIntAnalystClean$jobLev <- factor(LAbusinessIntAnalystClean$jobLev)
rm(uniqueIndex)
#clean dataAnalyst
uniqueIndex <- which(duplicated(LAdataAnalyst[,"jobDesc"])==FALSE)
LAdataAnalystClean <- LAdataAnalyst[uniqueIndex,]
LAdataAnalystClean <- as.data.frame(LAdataAnalystClean,stringsAsFactors = FALSE)
LAdataAnalystClean$jobLev <- factor(LAdataAnalystClean$jobLev)
rm(uniqueIndex)
#combine busAnalystClean, businessIntAnalystClean, dataAnalystClean
#check for duplicates
tempJobData <- rbind(LAbusinessAnalystClean, LAbusinessIntAnalystClean, LAdataAnalystClean)
tempJobData <- as.data.frame(tempJobData,stringsAsFactors=FALSE)
tempJobData$jobLev <- factor(tempJobData$jobLev)
uniqueIndex <- which(duplicated(tempJobData$jobDesc)==FALSE)
tempJobData <- tempJobData[uniqueIndex,]
rm(uniqueIndex)
#combine dataScienceClean with tempJobData and remove any duplicates
LAjobData <- rbind(LAdataScienceClean,tempJobData)
LAjobData <- as.data.frame(LAjobData,stringsAsFactors=FALSE)
LAjobData$jobLev <- factor(LAjobData$jobLev)
dupIndex <- which(duplicated(LAjobData$jobDesc) | duplicated(LAjobData$jobDesc, fromLast = TRUE) & LAjobData$jobLev==1)
LAjobData <- LAjobData[-dupIndex, ]
rm(dupIndex)
for(row in 1:nrow(LAjobData)){
LAjobData$jobDesc[row] <- Clean_String(LAjobData$jobDesc[row])
}
#randomly shuffle data
set.seed(123)
LAjobData <- LAjobData[sample(nrow(LAjobData)),]
LAjobData <- LAjobData[sample(nrow(LAjobData)),]
LAjob_corpus <- VCorpus(VectorSource(LAjobData$jobDesc))
LAjob_corpus_clean <- tm_map(LAjob_corpus, content_transformer(tolower))
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, removeNumbers)
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, removeWords, c(stopwords("english"),"will"))
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, removePunctuation)
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, stemDocument)
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, stripWhitespace)
LAjob_dtm <- DocumentTermMatrix(LAjob_corpus_clean,
control = list(dictionary=Terms(job_dtm)))
LAjob_labels <- LAjobData[,"jobLev"]
LAjob_train_labels <- LAjobData[,"jobLev"]
LAjob_test_labels <- LAjobData[,"jobLev"]
LAjob_test <- apply(LAjob_dtm, MARGIN = 2, convert_counts)
#naive bayes results
LAnb_pred <- predict(job_nb,LAjob_test)
rm(LAdataScience,LAdataAnalyst,LAbusinessAnalyst,LAbusinessIntAnalyst)
load("LAData.RData")
#clean LAdataScience
uniqueIndex <- which(duplicated(LAdataScience[,"jobDesc"])==FALSE)
LAdataScienceClean <- LAdataScience[uniqueIndex,]
LAdataScienceClean <- as.data.frame(LAdataScienceClean,stringsAsFactors = FALSE)
LAdataScienceClean$jobLev <- factor(LAdataScienceClean$jobLev)
rm(uniqueIndex)
#clean busAnalyst
uniqueIndex <- which(duplicated(LAbusinessAnalyst[,"jobDesc"])==FALSE)
LAbusinessAnalystClean <- LAbusinessAnalyst[uniqueIndex,]
LAbusinessAnalystClean <- as.data.frame(LAbusinessAnalystClean,stringsAsFactors = FALSE)
LAbusinessAnalystClean$jobLev <- factor(LAbusinessAnalystClean$jobLev)
rm(uniqueIndex)
#clean busIntAnalyst
uniqueIndex <- which(duplicated(LAbusinessIntAnalyst[,"jobDesc"])==FALSE)
LAbusinessIntAnalystClean <- LAbusinessIntAnalyst[uniqueIndex,]
LAbusinessIntAnalystClean <- as.data.frame(LAbusinessIntAnalystClean,stringsAsFactors = FALSE)
LAbusinessIntAnalystClean$jobLev <- factor(LAbusinessIntAnalystClean$jobLev)
rm(uniqueIndex)
#clean dataAnalyst
uniqueIndex <- which(duplicated(LAdataAnalyst[,"jobDesc"])==FALSE)
LAdataAnalystClean <- LAdataAnalyst[uniqueIndex,]
LAdataAnalystClean <- as.data.frame(LAdataAnalystClean,stringsAsFactors = FALSE)
LAdataAnalystClean$jobLev <- factor(LAdataAnalystClean$jobLev)
rm(uniqueIndex)
#combine busAnalystClean, businessIntAnalystClean, dataAnalystClean
#check for duplicates
tempJobData <- rbind(LAbusinessAnalystClean, LAbusinessIntAnalystClean, LAdataAnalystClean)
tempJobData <- as.data.frame(tempJobData,stringsAsFactors=FALSE)
tempJobData$jobLev <- factor(tempJobData$jobLev)
uniqueIndex <- which(duplicated(tempJobData$jobDesc)==FALSE)
tempJobData <- tempJobData[uniqueIndex,]
rm(uniqueIndex)
#combine dataScienceClean with tempJobData and remove any duplicates
LAjobData <- rbind(LAdataScienceClean,tempJobData)
LAjobData <- as.data.frame(LAjobData,stringsAsFactors=FALSE)
LAjobData$jobLev <- factor(LAjobData$jobLev)
dupIndex <- which(duplicated(LAjobData$jobDesc) | duplicated(LAjobData$jobDesc, fromLast = TRUE) & LAjobData$jobLev==1)
LAjobData <- LAjobData[-dupIndex, ]
rm(dupIndex)
for(row in 1:nrow(LAjobData)){
LAjobData$jobDesc[row] <- Clean_String(LAjobData$jobDesc[row])
}
#randomly shuffle data
set.seed(123)
LAjobData <- LAjobData[sample(nrow(LAjobData)),]
LAjobData <- LAjobData[sample(nrow(LAjobData)),]
LAjob_corpus <- VCorpus(VectorSource(LAjobData$jobDesc))
LAjob_corpus_clean <- tm_map(LAjob_corpus, content_transformer(tolower))
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, removeNumbers)
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, removeWords, c(stopwords("english"),"will"))
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, removePunctuation)
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, stemDocument)
LAjob_corpus_clean <- tm_map(LAjob_corpus_clean, stripWhitespace)
LAjob_dtm <- DocumentTermMatrix(LAjob_corpus_clean,
control = list(dictionary=Terms(job_dtm_freq)))
LAjob_labels <- LAjobData[,"jobLev"]
LAjob_train_labels <- LAjobData[,"jobLev"]
LAjob_test_labels <- LAjobData[,"jobLev"]
LAjob_test <- apply(LAjob_dtm, MARGIN = 2, convert_counts)
#naive bayes results
LAnb_pred <- predict(job_nb,LAjob_test)
LAcmnb <- confusionMatrix(LAnb_pred, LAjob_test_labels, positive="1")
##confusion table
LAcmnb$table
##Accuracy Percentage
LAcmnb$overall[1]
#knn results
LAknn_pred <- predict(job_knn,LAjob_test)
LAcmknn <- confusionMatrix(LAknn_pred, LAjob_test_labels, positive="1")
LAcmknn$table
LAcmknn$overall[1]
#rf results
LArf_pred <- predict(job_rf,LAjob_test)
LAcmrf <- confusionMatrix(LArf_pred, LAjob_test_labels, positive="1")
LAcmrf$table
LAcmrf$overall[1]
#lasso results
LAlasso_pred <- predict(job_lasso,LAjob_test)
LAcmlasso <- confusionMatrix(LAlasso_pred, LAjob_test_labels, positive="1")
LAcmlasso$table
LAcmlasso$overall[1]
#ridge results
LAridge_pred <- predict(job_ridge,LAjob_test)
LAcmridge <- confusionMatrix(LAridge_pred, LAjob_test_labels, positive="1")
LAcmridge$table
LAcmridge$overall[1]
LAaccuracy <- as_tibble(cbind(c("Naive Bayes","KNN","Random Forest","LASSO","Ridge"),
c(LAcmnb$overall[1],LAcmknn$overall[1], LAcmrf$overall[1],
LAcmlasso$overall[1],LAcmridge$overall[1])))
LAaccuracy
LAaccuracy <- as_tibble(cbind("Model" = c("Naive Bayes","KNN","Random Forest","LASSO","Ridge"),
"Accuracy" = c(LAcmnb$overall[1],LAcmknn$overall[1], LAcmrf$overall[1],
LAcmlasso$overall[1],LAcmridge$overall[1])))
LAaccuracy
?numeric
LAaccuracy <- as_tibble(cbind("Model" = c("Naive Bayes","KNN","Random Forest","LASSO","Ridge"),
"Accuracy" = as.numeric(c(LAcmnb$overall[1],LAcmknn$overall[1], LAcmrf$overall[1],
LAcmlasso$overall[1],LAcmridge$overall[1]))))
LAaccuracy
LAaccuracy <- as_tibble("Model" = c("Naive Bayes","KNN","Random Forest","LASSO","Ridge"),
"Accuracy" = as.numeric(c(LAcmnb$overall[1],LAcmknn$overall[1], LAcmrf$overall[1],
LAcmlasso$overall[1],LAcmridge$overall[1])))
?as_tibble
LAaccuracy <- as.data.frame("Model" = c("Naive Bayes","KNN","Random Forest","LASSO","Ridge"),
"Accuracy" = as.numeric(c(LAcmnb$overall[1],LAcmknn$overall[1], LAcmrf$overall[1],
LAcmlasso$overall[1],LAcmridge$overall[1])))
LAaccuracy <- data.frame("Model" = c("Naive Bayes","KNN","Random Forest","LASSO","Ridge"),
"Accuracy" = as.numeric(c(LAcmnb$overall[1],LAcmknn$overall[1], LAcmrf$overall[1],
LAcmlasso$overall[1],LAcmridge$overall[1])))
LAaccuracy
class(LAaccuracy$Accuracy)
class(LAaccuracy$Model)
LAaccuracy <- data.frame("Model" = c("Naive Bayes","KNN","Random Forest","LASSO","Ridge"),
"Accuracy" = as.numeric(c(LAcmnb$overall[1],LAcmknn$overall[1], LAcmrf$overall[1],
LAcmlasso$overall[1],LAcmridge$overall[1])),stringsAsFactors = FALSE)
LAaccuracy
LAaccuracy <- LAaccuracy %>% arrange(desc(Accuracy))
LAaccuracy
Accuracy <- data.frame("Model" = c("Naive Bayes","KNN","Random Forest","LASSO","Ridge"),
"Accuracy" = as.numeric(c(cmnb$overall[1],cmknn$overall[1], cmrf$overall[1],
cmlasso$overall[1],cmridge$overall[1])),stringsAsFactors = FALSE)
Accuracy <- Accuracy %>% arrange(desc(Accuracy))
print(Accuracy)
print(LAaccuracy)
LAjob_dtm
job_dtm_freq
rmarkdown::render("output.Rmd")
Accuracy <- data.frame("Model" = c("Naive Bayes","KNN","Random Forest","LASSO","Ridge"),"Accuracy" =as.numeric(c(cmnb$overall[1],cmknn$overall[1], cmrf$overall[1],             cmlasso$overall[1],cmridge$overall[1])),stringsAsFactors = FALSE)
Accuracy <- Accuracy %>% arrange(desc(Accuracy))
print(Accuracy)
cmridge
cmridge$overall[1]
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
cbind(Accuracy,c(LAcmnb$overall[1],LAcmknn$overall[1], LAcmrf$overall[1],
LAcmlasso$overall[1],LAcmridge$overall[1]))
cbind(Accuracy,"LA Accuracy" = c(LAcmnb$overall[1],LAcmknn$overall[1], LAcmrf$overall[1],
LAcmlasso$overall[1],LAcmridge$overall[1]))
cbind(Accuracy,"LA Accuracy" = LAaccuracy$Accuracy)
rmarkdown::render("output.Rmd")
nrow(jobData)
7/554
plot(job_lasso)
plot(lasso_pred)
plot(job_lasso$finalModel)
plot(job_lasso$finalModel)
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
nrow(LAjobs)
nrow(LAjobData)
nrow(jobData)
length(which(LAjobData$jobLev==1))
length(which(jobData$jobLev==1))
length(which(LAjobData$jobLev==1))/nrow(LAjobData)
length(which(jobData$jobLev==1))/nrow(jobData)
rmarkdown::render("output.Rmd")
varImp(job_lasso)
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
?getChromeProfile
?remoteDriver
?confusionMatrix
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
update.packages()
?update.packages()
update.packages()
y
y
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
?update.packages()
update.packages()
install.packages("yaml")
rmarkdown::render("output.Rmd")
install.packages("digest")
rmarkdown::render("output.Rmd")
install.packages("Rcpp")
rmarkdown::render("output.Rmd")
install.packages("yaml", dependencies=TRUE)
rmarkdown::render("output.Rmd")
install.packages("Rcpp", dependencies=TRUE)
rmarkdown::render("output.Rmd")
Sys.getenv("R_LIBS_USER")
?update.packages
Sys.getenv("R_LIBS_USER")
update.packages(instlib = Sys.getenv("R_LIBS_USER"))
installed.packages(Sys.getenv("R_LIBS_USER"))
update.packages(instlib = "C:\Users\dillo\Documents\R\win-library\3.4")
update.packages(instlib = "C:\\Users\\dillo\\Documents\\R\\win-library\\3.4")
packageVersion("devtools")
?install.packages()
library(devtools)
install(Rcpp)
?install
install(pkg = "Rcpp")
install_version(Rcpp)
install.packages("Rcpp")
rmarkdown::render("output.Rmd")
install.packages("Rcpp")
rmarkdown::render("output.Rmd")
install.packages("ggplot2")
rmarkdown::render("output.Rmd")
install.packages("caret")
rmarkdown::render("output.Rmd")
install.packages("glue")
rmarkdown::render("output.Rmd")
install.packages("tidyr")
rmarkdown::render("output.Rmd")
install.packages("lubridate")
rmarkdown::render("output.Rmd")
install.packages("XML")
rmarkdown::render("output.Rmd")
install.packages("openssl")
rmarkdown::render("output.Rmd")
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
rm(list=ls())
install.packages("RSelenium")
install.packages("RSelenium")
rmarkdown::render("output.Rmd")
install.packages(c("stringr", "tidytext", "xml2", "zoo"))
rmarkdown::render("output.Rmd")
install.packages("xml2")
rmarkdown::render("output.Rmd")
install.packages("tm")
library(magrittr)
library(tm)
library(SnowballC)
library(wordcloud)
library(caret)
library(RSelenium)
library(dplyr)
library(stringr)
rmarkdown::render("output.Rmd")
install.packages("tm")
rmarkdown::render("output.Rmd")
install.packages("tm",dependencies=TRUE)
rmarkdown::render("output.Rmd")
lbrary(tm)
library(tm\)
library(tm)
Sys.getenv("R_LIBS_USER")
install.packages("slam")
install.packages("slam")
install.packages("tm")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
install.packages("prettydoc")
rmarkdown::render("output.Rmd")
html_pretty::render("output.Rmd")
prettydoc::render("output.Rmd")
?prettydoc
??prettydoc
rmarkdown::render("test.Rmd")
View(x1)
prettydoc::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
?prettydoc
prettydoc::?htmlpretty
?html_pretty
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
getwd
getwd()
getwd()
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("bla.Rmd")
rmarkdown::render("output.Rmd")
rmarkdown::render("output.Rmd")
